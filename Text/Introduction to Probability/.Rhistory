# param
# User Input for the number of coin tosses and probability of heads
payoff <- as.integer(readline(prompt = "Enter the payoff: "))
win_chance <- as.numeric(readline(prompt = "Enter the probability of winning: "))
n <- as.integer(readline(prompt = "Enter the number of trade: "))
#payoff = 8
#win_chance = .2
#n = 1000
outcome = betting(payoff,win_chance,n) ; outcome
expectation = (payoff*win_chance - (1-win_chance)*1); expectation
plot(100 + cumsum(outcome))
expectation = (payoff*win_chance - (1-win_chance)*1); paste("Expectation: " , expectation)
outcome = betting(payoff,win_chance,n) ; paste("Outcome: " , outcome)
# There are two outcome
betting = function(payoff, win_chance, n){
outcomes <- c()
equity = 100
for(i in 1:n){
rand <- runif(1, min = 0, max = 1)
if(rand < win_chance){
outcomes = c(outcomes, payoff)
}else{
outcomes = c(outcomes, -1)
}
}
return(outcomes)
}
# param
# User Input for the number of coin tosses and probability of heads
payoff <- as.integer(readline(prompt = "Enter the payoff: "))
win_chance <- as.numeric(readline(prompt = "Enter the probability of winning: "))
n <- as.integer(readline(prompt = "Enter the number of trade: "))
#payoff = 8
#win_chance = .2
#n = 1000
outcome = betting(payoff,win_chance,n) ; outcome
expectation = (payoff*win_chance - (1-win_chance)*1);
plot(100 + cumsum(outcome))
expectation = (payoff*win_chance - (1-win_chance)*1); paste("Expectation: " expectation)
expectation = (payoff*win_chance - (1-win_chance)*1); paste("Expectation: " expectation)
expectation = (payoff*win_chance - (1-win_chance)*1); paste("Expectation: " ,expectation)
plot(100 + cumsum(outcome))
plot(100 + cumsum(outcome), type = "l")
# There are two outcome
betting = function(payoff, win_chance, n){
outcomes <- c()
equity = 100
for(i in 1:n){
rand <- runif(1, min = 0, max = 1)
if(rand < win_chance){
outcomes = c(outcomes, payoff)
}else{
outcomes = c(outcomes, -1)
}
}
return(outcomes)
}
# param
# User Input for the number of coin tosses and probability of heads
payoff <- as.integer(readline(prompt = "Enter the payoff: "))
win_chance <- as.numeric(readline(prompt = "Enter the probability of winning: "))
n <- as.integer(readline(prompt = "Enter the number of trade: "))
#payoff = 8
#win_chance = .2
#n = 1000
outcome = betting(payoff,win_chance,n) ; outcome
expectation = (payoff*win_chance - (1-win_chance)*1); paste("Expectation: " ,expectation)
plot(100 + cumsum(outcome), type = "l")
# There are two outcome
betting = function(payoff, win_chance, n){
outcomes <- c()
equity = 100
for(i in 1:n){
rand <- runif(1, min = 0, max = 1)
if(rand < win_chance){
outcomes = c(outcomes, payoff)
}else{
outcomes = c(outcomes, -1)
}
}
return(outcomes)
}
# param
# User Input for the number of coin tosses and probability of heads
payoff <- as.integer(readline(prompt = "Enter the payoff: "))
win_chance <- as.numeric(readline(prompt = "Enter the probability of winning: "))
n <- as.integer(readline(prompt = "Enter the number of trade: "))
#payoff = 8
#win_chance = .2
#n = 1000
outcome = betting(payoff,win_chance,n) ; outcome
expectation = (payoff*win_chance - (1-win_chance)*1); paste("Expectation: " ,expectation)
plot(100 + cumsum(outcome), type = "l")
# There are two outcome
betting = function(payoff, win_chance, n){
outcomes <- c()
equity = 100
for(i in 1:n){
rand <- runif(1, min = 0, max = 1)
if(rand < win_chance){
outcomes = c(outcomes, payoff)
}else{
outcomes = c(outcomes, -1)
}
}
return(outcomes)
}
# param
# User Input for the number of coin tosses and probability of heads
payoff <- as.integer(readline(prompt = "Enter the payoff: "))
win_chance <- as.numeric(readline(prompt = "Enter the probability of winning: "))
# There are two outcome
betting = function(payoff, win_chance, n){
outcomes <- c()
equity = 100
for(i in 1:n){
rand <- runif(1, min = 0, max = 1)
if(rand < win_chance){
outcomes = c(outcomes, payoff)
}else{
outcomes = c(outcomes, -1)
}
}
return(outcomes)
}
# param
# User Input for the number of coin tosses and probability of heads
payoff <- as.integer(readline(prompt = "Enter the payoff: "))
win_chance <- as.numeric(readline(prompt = "Enter the probability of winning: "))
n <- as.integer(readline(prompt = "Enter the number of trade: "))
#payoff = 8
#win_chance = .2
#n = 1000
outcome = betting(payoff,win_chance,n) ; outcome
expectation = (payoff*win_chance - (1-win_chance)*1); paste("Expectation: " ,expectation)
plot(100 + cumsum(outcome), type = "l")
hist(outcome)
# There are two outcome
betting = function(payoff, win_chance, n){
outcomes <- c()
equity = 100
for(i in 1:n){
rand <- runif(1, min = 0, max = 1)
if(rand < win_chance){
outcomes = c(outcomes, payoff)
}else{
outcomes = c(outcomes, -1)
}
}
return(outcomes)
}
# param
# User Input for the number of coin tosses and probability of heads
payoff <- as.integer(readline(prompt = "Enter the payoff: "))
win_chance <- as.numeric(readline(prompt = "Enter the probability of winning: "))
n <- as.integer(readline(prompt = "Enter the number of trade: "))
# Plot and expectancy
outcome = betting(payoff,win_chance,n) ; outcome
expectation = (payoff*win_chance - (1-win_chance)*1); paste("Expectation: " ,expectation)
plot(100 + cumsum(outcome), type = "l")
hist(outcome)
# Simulate de Mere's problem in R
simulate_deMere <- function(n_experiments) {
count_sixes <- 0
for (i in 1:n_experiments) {
# Roll a fair six-sided die 4 times
rolls <- sample(1:6, 4, replace = TRUE)
# Check if at least one six appears
if (6 %in% rolls) {
count_sixes <- count_sixes + 1
}
}
# Calculate the probability of getting at least one six in 4 rolls
prob_sixes <- count_sixes / n_experiments
return(prob_sixes)
}
# Run the simulation for 1000 and 10000 experiments
prob_1000 <- simulate_deMere(1000)
cat("Probability with 1000 experiments:", prob_1000, "\n")
prob_10000 <- simulate_deMere(10000)
cat("Probability with 10000 experiments:", prob_10000, "\n")
# Simulate de Mere's problem in R
simulate_deMere <- function(n_experiments) {
count_sixes <- 0
for (i in 1:n_experiments) {
# Roll a fair six-sided die 4 times
rolls <- sample(1:6, 4, replace = TRUE)
# Check if at least one six appears
if (6 %in% rolls) {
count_sixes <- count_sixes + 1
}
}
# Calculate the probability of getting at least one six in 4 rolls
prob_sixes <- count_sixes / n_experiments
return(prob_sixes)
}
# Run the simulation for 1000 and 10000 experiments
prob_1000 <- simulate_deMere(1000)
cat("Probability with 1000 experiments:", prob_1000, "\n")
prob_100 <- simulate_deMere(100)
cat("Probability with 10000 experiments:", prob_100, "\n")
# Simulate de Mere's problem in R
simulate_deMere <- function(n_experiments) {
count_sixes <- 0
for (i in 1:n_experiments) {
# Roll a fair six-sided die 4 times
rolls <- sample(1:6, 4, replace = TRUE)
# Check if at least one six appears
if (6 %in% rolls) {
count_sixes <- count_sixes + 1
}
}
# Calculate the probability of getting at least one six in 4 rolls
prob_sixes <- count_sixes / n_experiments
return(prob_sixes)
}
# Run the simulation for 1000 and 10000 experiments
prob_1000 <- simulate_deMere(1000)
cat("Probability with 1000 experiments:", prob_1000, "\n")
prob_100 <- simulate_deMere(10)
cat("Probability with 10000 experiments:", prob_100, "\n")
# Simulate de Mere's problem in R
simulate_deMere <- function(n_experiments) {
count_sixes <- 0
for (i in 1:n_experiments) {
# Roll a fair six-sided die 4 times
rolls <- sample(1:6, 4, replace = TRUE)
# Check if at least one six appears
if (6 %in% rolls) {
count_sixes <- count_sixes + 1
}
}
# Calculate the probability of getting at least one six in 4 rolls
prob_sixes <- count_sixes / n_experiments
return(prob_sixes)
}
# Run the simulation for 1000 and 10000 experiments
prob_1000 <- simulate_deMere(1000)
cat("Probability with 1000 experiments:", prob_1000, "\n")
prob_100 <- simulate_deMere(10)
cat("Probability with 10000 experiments:", prob_100, "\n")
head_or_tail <- function(n, p) {
outcomes <- c()
head_event = 0
cummulative_prob = c()
for (i in 1:n) {
toss <- runif(1, min = 0, max = 1)
if (toss < p) {
outcomes <- c(outcomes, "H")
head_event = head_event + 1
} else {
outcomes <- c(outcomes, "T")
}
current_prob = head_event / i
cummulative_prob = rbind(cummulative_prob, current_prob)
}
return(outcomes)
}
head_or_tail(10)
head_or_tail(10,3)
head_or_tail(10,.5)
head_or_tail <- function(n, p) {
outcomes <- c()
head_event = 0
cummulative_prob = c()
for (i in 1:n) {
toss <- runif(1, min = 0, max = 1)
if (toss < p) {
outcomes <- c(outcomes, 1)
head_event = head_event + 1
} else {
outcomes <- c(outcomes, 0)
}
current_prob = head_event / i
cummulative_prob = rbind(cummulative_prob, current_prob)
}
return(outcomes)
}
head_or_tail(10,.5)
cumsum(head_or_tail(10,.5))
plot(cumsum(head_or_tail(10,.5)))
plot(cumsum(head_or_tail(10,.5)), type = 'l')
head_or_tail <- function(n, p) {
outcomes <- c()
head_event = 0
cummulative_prob = c()
for (i in 1:n) {
toss <- runif(1, min = 0, max = 1)
if (toss < p) {
outcomes <- c(outcomes, 1)
head_event = head_event + 1
} else {
outcomes <- c(outcomes, 0)
}
current_prob = head_event / i
cummulative_prob = rbind(cummulative_prob, current_prob)
}
return(outcomes)
}
head_or_tail(10,.5)
plot(cumsum(head_or_tail(10,.5)), type = 'l')
head_or_tail(10,.5)
plot(cumsum(head_or_tail(10,.5)), type = 'l')
head_or_tail <- function(n, p) {
outcomes <- c()
head_event = 0
cummulative_prob = c()
for (i in 1:n) {
toss <- runif(1, min = 0, max = 1)
if (toss < p) {
outcomes <- c(outcomes, 1)
head_event = head_event + 1
} else {
outcomes <- c(outcomes, -1)
}
current_prob = head_event / i
cummulative_prob = rbind(cummulative_prob, current_prob)
}
return(outcomes)
}
head_or_tail(10,.5)
plot(cumsum(head_or_tail(10,.5)), type = 'l')
head_or_tail <- function(n, p) {
outcomes <- c()
head_event = 0
cummulative_prob = c()
for (i in 1:n) {
toss <- runif(1, min = 0, max = 1)
if (toss < p) {
outcomes <- c(outcomes, 1)
head_event = head_event + 1
} else {
outcomes <- c(outcomes, -1)
}
current_prob = head_event / i
cummulative_prob = rbind(cummulative_prob, current_prob)
}
return(outcomes)
}
head_or_tail(10,.5)
plot(cumsum(head_or_tail(10,.5)), type = 'l')
head_or_tail <- function(n, p) {
outcomes <- c()
head_event = 0
cummulative_prob = c()
for (i in 1:n) {
toss <- runif(1, min = 0, max = 1)
if (toss < p) {
outcomes <- c(outcomes, 1)
head_event = head_event + 1
} else {
outcomes <- c(outcomes, -1)
}
current_prob = head_event / i
cummulative_prob = rbind(cummulative_prob, current_prob)
}
return(outcomes)
}
head_or_tail(10,.5)
hist(head_or_tail(10,.5))
plot(cumsum(head_or_tail(10,.5)), type = 'l')
head_or_tail <- function(n, p) {
outcomes <- c()
head_event = 0
cummulative_prob = c()
for (i in 1:n) {
toss <- runif(1, min = 0, max = 1)
if (toss < p) {
outcomes <- c(outcomes, 1)
head_event = head_event + 1
} else {
outcomes <- c(outcomes, -1)
}
current_prob = head_event / i
cummulative_prob = rbind(cummulative_prob, current_prob)
}
return(outcomes)
}
outcome = head_or_tail(10,.5)
hist(outcome)
plot(cumsum(outcome, type = 'l')
plot(cumsum(outcome), type = 'l')
outcome = head_or_tail(40,.5)
hist(outcome)
plot(cumsum(outcome), type = 'l')
outcome = head_or_tail(40,.5)
hist(outcome)
plot(cumsum(outcome), type = 'l')
outcome = head_or_tail(40,.5)
hist(outcome)
plot(cumsum(outcome), type = 'l')
outcome = head_or_tail(40,.5)
hist(outcome)
plot(cumsum(outcome), type = 'l')
outcome = head_or_tail(40,.5)
hist(outcome)
plot(cumsum(outcome), type = 'l')
outcome = head_or_tail(40,.5)
hist(outcome)
plot(cumsum(outcome), type = 'l')
outcome = head_or_tail(40,.5)
hist(outcome)
plot(cumsum(outcome), type = 'l')
outcome
sum(outcome)
head_or_tail <- function(n, p) {
outcomes <- c()
head_event = 0
cummulative_prob = c()
for (i in 1:n) {
toss <- runif(1, min = 0, max = 1)
if (toss < p) {
outcomes <- c(outcomes, 1)
head_event = head_event + 1
} else {
outcomes <- c(outcomes, -1)
}
current_prob = head_event / i
cummulative_prob = rbind(cummulative_prob, current_prob)
}
return(outcomes)
}
outcome = head_or_tail(40,.5)
hist(outcome)
plot(cumsum(outcome), type = 'l')
sum(outcome)
simulate_game <- function(n_simulations, n_tosses, p) {
wins_A <- 0
wins_B <- 0
wins_C <- 0
for (i in 1:n_simulations) {
outcomes <- head_or_tail(n_tosses, p)
sum_outcomes <- sum(outcomes)
if (sum_outcomes > 0) {
wins_A <- wins_A + 1
} else if (sum_outcomes < 0) {
wins_B <- wins_B + 1
} else {
wins_C <- wins_C + 1
}
}
results <- list("Wins_A" = wins_A,
"Wins_B" = wins_B,
"Wins_C" = wins_C)
return(results)
}
# Simulate the game 100 times with 40 tosses and p = 0.5
results <- simulate_game(100, 40, 0.5)
# Print the results
print(paste("A wins:", results$Wins_A, "times"))
print(paste("B wins:", results$Wins_B, "times"))
print(paste("C wins:", results$Wins_C, "times"))
hist(results)
hist(results$Wins_A)
barplot(results)
results
# Simulate the game 100 times with 40 tosses and p = 0.5
results <- simulate_game(1000, 40, 0.5)
# Print the results
print(paste("A wins:", results$Wins_A, "times"))
print(paste("B wins:", results$Wins_B, "times"))
print(paste("C wins:", results$Wins_C, "times"))
# Print the results
print(paste("A wins:", results$Wins_A / 1000, "times"))
print(paste("C wins:", results$Wins_C / 1000, "times"))
head_or_tail <- function(n, p) {
outcomes <- c()
head_event = 0
cummulative_prob = c()
for (i in 1:n) {
toss <- runif(1, min = 0, max = 1)
if (toss < p) {
outcomes <- c(outcomes, 1)
head_event = head_event + 1
} else {
outcomes <- c(outcomes, -1)
}
current_prob = head_event / i
cummulative_prob = rbind(cummulative_prob, current_prob)
}
return(outcomes)
}
# Get output
outcome = head_or_tail(40,.5)
hist(outcome)
plot(cumsum(outcome), type = 'l')
simulate_game <- function(n_simulations, n_tosses, p) {
wins_A <- 0
wins_B <- 0
wins_C <- 0
for (i in 1:n_simulations) {
outcomes <- head_or_tail(n_tosses, p)
sum_outcomes <- sum(outcomes)
if (sum_outcomes > 0) {
wins_A <- wins_A + 1
} else if (sum_outcomes < 0) {
wins_B <- wins_B + 1
} else {
wins_C <- wins_C + 1
}
}
results <- list("Wins_A" = wins_A,
"Wins_B" = wins_B,
"Wins_C" = wins_C)
return(results)
}
# Simulate the game 100 times with 40 tosses and p = 0.5
results <- simulate_game(1000, 40, 0.5)
# Print the results
print(paste("A wins:", results$Wins_A / 1000, "times"))
print(paste("B wins:", results$Wins_B / 1000, "times"))
print(paste("C wins:", results$Wins_C / 1000, "times"))
